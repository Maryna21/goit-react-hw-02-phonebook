{"version":3,"sources":["components/ContactForm/contactForm.js","components/ContactList/contactList.js","components/Filter/filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","loginInputId","shortid","generate","state","contacts","name","number","handleNameChange","event","setState","currentTarget","value","handleSubmit","preventDefault","props","onAddContact","reset","onSubmit","this","htmlFor","type","id","onChange","Component","ContactList","onDeleteContact","map","onClick","Filter","onChangeFilter","e","target","App","filter","addContact","contact","prevState","find","alert","deleteContact","contactId","changeFilter","getVisibleContacts","toLowerCase","includes","visibleContacts","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d5417cf.chunk.js","sourcesContent":["import shortid from 'shortid';\nimport React, { Component } from 'react';\n\nexport default class ContactForm extends Component{\n    loginInputId = shortid.generate();\n    state = {\n        contacts: [],\n        name: '',\n        number: ''\n      }\n      handleNameChange=event=>{\n        this.setState({[event.currentTarget.name]:event.currentTarget.value});\n      }\n        handleSubmit = event => {\n          event.preventDefault();\n         this.props.onAddContact(this.state);\n         this.reset();\n        }\n        reset = () => {\n            this.setState({name: '', number:''})\n        }\n        render() {\n            return (\n              <form onSubmit={this.handleSubmit}>\n                <label htmlFor={this.loginInputId}>Name</label>\n                <input type=\"text\" name=\"name\" id={this.loginInputId} value={this.state.name} onChange={this.handleNameChange}/>\n                <label htmlFor={this.loginInputId}>Number</label>\n                <input type=\"text\" name=\"number\" id={this.loginInputId} value={this.state.number} onChange={this.handleNameChange}/>\n                <button type=\"submit\">Add contact</button>\n              </form>\n            );\n          }}\n","import React from 'react';\n\nconst ContactList = ({contacts, onDeleteContact})=>(\n  <ul>\n    {contacts.map(({id, name, number}) => (\n      <li key={id}> {name}: {number}\n      <button type=\"button\" onClick={()=> onDeleteContact(id)}>Delete</button></li>\n    ))}\n  </ul>\n)\nexport default ContactList;","import React from 'react';\n\nexport default function Filter({value, onChangeFilter}){\n    return( \n        <div>\n            <input type=\"name\" value={value} onChange={e => onChangeFilter(e.target.value)}/>\n        </div>\n    )\n}","import shortid from 'shortid';\nimport './App.css';\nimport React, { Component } from 'react';\nimport ContactForm from 'components/ContactForm/contactForm';\nimport ContactList from 'components/ContactList/contactList';\nimport Filter from 'components/Filter/filter';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: ''\n  }\n\n  addContact = ({name, number}) => {\n    const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n    };\n    this.setState(prevState =>{\n      if(this.state.contacts.find((contact)=>contact.name===name)){\n        alert (`${contact.name} is already in contacts.`)\n      }\n      else{\n      return {\n          contacts: [...prevState.contacts, contact],}}\n  })\n};\n\ndeleteContact = contactId =>{\n  this.setState(prevState =>({\n    contacts: prevState.contacts.filter(contact => contact.id!== contactId),\n  }))\n \n}\n\nchangeFilter = filter => {\n  this.setState({filter});\n}\ngetVisibleContacts = ()=>{\n  const {contacts, filter} = this.state;\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()), \n    )\n}\n  \n  render() {\n    const {filter} = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n       <h1>Phonebook</h1>\n     <ContactForm onAddContact={this.addContact} />\n     {visibleContacts.length > 1 &&  <Filter value={filter} onChangeFilter ={this.changeFilter}/>}\n     \n     {visibleContacts.length > 0 && <div><h2>Contacts</h2><ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact}/></div>}\n    \n     </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}